server:
  port: 8081

spring:
  application:
    name: ORDER-SERVICE
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: update
  datasource:
    platform: postgres
    url: jdbc:postgresql://localhost:5432/order_service
    username: postgres
    password: root
    driverClassName: org.postgresql.Driver

  zipkin:
    base-url: http://localhost:9411

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    register-with-eureka: true
    fetch-registry: true


management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0

# resilience4j properties
resilience4j:
  circuitbreaker:
    instances:
      inventory:
        registerHealthIndicator: true
        event-consumer-buffer-size: 10
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true

# resilience Timeout properties
  timelimiter:
    instances:
      inventory:
        timeout-duration: 3s

# resilience retry properties
  retry:
    instances:
      inventory:
        max-attempts: 3
        wait-duration: 5s


# To get a customized logging patter -> we need to configure this
logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

# kafka properties
  kafka:
    bootstrap-servers: localhost:9092
    template:
      default-topic: notificationTopic
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer